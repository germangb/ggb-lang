fn fibonacci(n:u8):u8 {
    // values that overflow an u8
    if (> n 13) {
        !! // panic
    }

    // memoization cache array, located at a fixed offset in memory (0x0100)
    // holds more items than this function can handle
    static CACHE:[u8 256]

    // handle base case
    if (| (==n 0) (==n 1)) {
        return 1
    }

    if (== ([n]CACHE) 0) {
        let n1:u8 = (fibonacci (-n 1))
        let n2:u8 = (fibonacci (-n 2))
        (= ([n]CACHE) (+n1 n2))
    }

    return ([n]CACHE)
}

// memory to store the result
static RESULT:[u8 13]

for i:u8 in 0..13 {
    let t:u8 = (fibonacci i)
    (= ([i]RESULT) t)
}
